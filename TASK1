<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>To-Do List</title>
    <style>
        body {
            background: url('https://plus.unsplash.com/premium_photo-1681487870238-4a2dfddc6bcb?q=80&w=1480&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D') no-repeat center center fixed;
            background-size: cover; 
            font-family: 'Times New Roman', Times, serif;
        
            /* Add a light overlay to the background image */
            position: relative; /* To position the overlay */
        }
        
        body::before {
            content: ""; /* Required for pseudo-elements */
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.7); /* White overlay with 70% opacity */
            z-index: -1; /* Place the overlay behind the content */
        }
        
        /* ... your other existing styles ... */
        
        .container {
            width: 500px;
            margin: 0 auto;
            padding: 20px;
            border: 1px solid #ccc;
        }
        h1 {
            text-align: center;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5); /* Existing shadow */
            color: #007bff; /* Example: Change color to blue */
          }
          
        /* ... your other existing styles ... */

        input[type="text"] {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            box-sizing: border-box;
            border-radius: 5px; /* Slightly rounded corners */
            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2); /* Initial 3D shadow */
            transition: box-shadow 0.1s ease; /* Smooth transition for shadow */
        }

        input[type="text"]:focus {
            outline: none; /* Remove default focus outline */
            box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.3); /* Larger shadow on focus */
        }

        /* ... your existing styles ... */

        button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 20px;
            border: none;
            cursor: pointer;
            border-radius: 5px; /* Slightly rounded corners */
            transition: transform 0.1s ease, box-shadow 0.1s ease; /* Add smooth transitions */
        }

        button:hover {
            transform: translateY(-2px); /* Move slightly up on hover */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); /* Add a larger shadow on hover */
        }

        button:active {
            transform: translateY(1px); /* Move slightly down on click */
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.4); /* Add a darker shadow on click */
        }

        ul {
            list-style: none;
            padding: 0;
        }
        li {
            padding: 10px;
            border-bottom: 1px solid #ccc;
        }
        li.completed {
            text-decoration: line-through;
            color: #aaa;
        }
        .edit-btn {
            background-color: #FFC107;
            margin-right: 5px;
        }
        .delete-btn {
            background-color: #F44336;
        }
        button:active {
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.8); /* Adjust color and intensity as needed */
        }
        .edit-btn:hover, .delete-btn:hover {
            transform: translateY(-2px); /* Move slightly up */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); /* Add a larger shadow */
        }
        .edit-btn, .delete-btn {
            padding: 8px 16px;
            border: none;
            border-radius: 4px; /* Slightly rounded corners */
            cursor: pointer;
            font-weight: bold;
            transition: transform 0.1s ease, box-shadow 0.1s ease; /* Add smooth transitions */
        }
        
        
    </style>
</head>
<body>
    <div class="container">
        <h1>MY Tasks</h1>
        <input type="text" id="new-task" placeholder="Add a new task...">
        <button onclick="addTask()">Add Task</button>

        <ul id="task-list"></ul>
    </div>

    <script>
        let tasks = loadTasks();
        const taskList = document.getElementById("task-list");

        // Load tasks from local storage
        function loadTasks() {
            const storedTasks = localStorage.getItem("tasks");
            return storedTasks ? JSON.parse(storedTasks) : [];
        }

        // Save tasks to local storage
        function saveTasks() {
            localStorage.setItem("tasks", JSON.stringify(tasks));
        }

        // Render tasks in the UI
        function renderTasks() {
            taskList.innerHTML = ""; 
            tasks.forEach((task, index) => {
                const li = document.createElement("li");
                li.innerHTML = `
                    <span class="${task.completed ? 'completed' : ''}">${task.text}</span>
                    <button class="edit-btn" data-task-index="${index}">Edit</button> 
                    <button class="delete-btn" data-task-index="${index}">Delete</button> 
                `;
                taskList.appendChild(li); 
        
                // Attach event listeners after the li is added to the DOM
                li.querySelector('.edit-btn').addEventListener('click', (event) => {
                    const taskIndex = event.target.dataset.taskIndex;
                    editTask(taskIndex);
                });
                li.querySelector('.delete-btn').addEventListener('click', (event) => {
                    const taskIndex = event.target.dataset.taskIndex;
                    deleteTask(taskIndex);
                });
            });
        }        

        // Add a new task
        function addTask() {
            const newTaskInput = document.getElementById("new-task");
            const newTaskText = newTaskInput.value.trim();
            if (newTaskText !== "") {
                tasks.push({ text: newTaskText, completed: false });
                saveTasks();
                renderTasks();
                newTaskInput.value = "";
            }
        }

        // Edit an existing task
        function editTask(index) {
            const newText = prompt("Edit task:", tasks[index].text);
            if (newText !== null) {
                tasks[index].text = newText;
                saveTasks();
                renderTasks();
            }
        }

        // Delete a task
        function deleteTask(index) {
            if (confirm("Are you sure you want to delete this task?")) {
                tasks.splice(index, 1);
                saveTasks();
                renderTasks();
            }
        }

        // Initial rendering of tasks
        renderTasks();
    </script>
</body>
</html>
